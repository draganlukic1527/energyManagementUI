[{"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/index.js":"1","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/reportWebVitals.js":"2","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/App.tsx":"3","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/useToken.tsx":"4","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/header/header.tsx":"5","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/Login/login.tsx":"6","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/Dashboard/dashboardcard/dashboardCard.tsx":"7","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/utils.tsx":"8","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/header/dropdown/dropdown.tsx":"9","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/Dashboard/chartcard/chartCard.tsx":"10","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/sharedComponents/carousel/carousel.tsx":"11","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/useDetectOutsideClick.tsx":"12","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/serviceWorker.js":"13"},{"size":527,"mtime":1670919699466,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1631582823967,"results":"16","hashOfConfig":"15"},{"size":1588,"mtime":1670825212610,"results":"17","hashOfConfig":"15"},{"size":576,"mtime":1668409291839,"results":"18","hashOfConfig":"15"},{"size":739,"mtime":1668411643064,"results":"19","hashOfConfig":"15"},{"size":3935,"mtime":1674802929124,"results":"20","hashOfConfig":"15"},{"size":3359,"mtime":1672732887193,"results":"21","hashOfConfig":"15"},{"size":9536,"mtime":1670143847039,"results":"22","hashOfConfig":"15"},{"size":1207,"mtime":1668410691418,"results":"23","hashOfConfig":"15"},{"size":560,"mtime":1672732806045,"results":"24","hashOfConfig":"15"},{"size":2067,"mtime":1671601615541,"results":"25","hashOfConfig":"15"},{"size":704,"mtime":1658705314478,"results":"26","hashOfConfig":"15"},{"size":5086,"mtime":1670918325038,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"3h3bu4",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/index.js",[],["62","63"],"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/reportWebVitals.js",[],"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/App.tsx",["64","65"],"import './App.css';\nimport LoginPage from './components/Login/login';\nimport Header from './components/header/header';\nimport DashboardCard from './components/Dashboard/dashboardcard/dashboardCard';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport React, { Component, useState } from 'react';\nimport '@fontsource/mulish';\nimport useToken from './useToken';\n\nexport interface ILoginProp {\n  userData: any;\n}\n\nfunction App() {\n  const { token, setToken } = useToken();\n\n  let loginProp: ILoginProp = {\n    userData: {},\n  };\n\n  console.log('token app:', token);\n  if (!token?.UserID) {\n    return <LoginPage setToken={setToken} />;\n  }\n  if (token) {\n    loginProp = {\n      userData: token,\n    };\n\n    console.log('Token Login:', token);\n    return (\n      <div className=\"App\">\n        <Header setToken={setToken} userData={loginProp.userData}></Header>\n        <DashboardCard userData={loginProp.userData}></DashboardCard>\n      </div>\n    );\n  }\n\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route\n          path=\"/login\"\n          element={\n            <div className=\"App\">\n              <LoginPage setToken={setToken} />\n            </div>\n          }\n        />\n        <Route\n          path=\"/\"\n          element={\n            <div className=\"App\">\n              <Header\n                setToken={setToken}\n                userData={loginProp.userData}\n              ></Header>\n              <DashboardCard userData={loginProp.userData} />\n            </div>\n          }\n        />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n",["66","67"],"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/useToken.tsx",[],"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/header/header.tsx",[],"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/Login/login.tsx",["68"],"import './login.css';\nimport React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport TextField from '@mui/material/TextField';\nimport PropTypes from 'prop-types';\nimport Popover from '@mui/material/Popover';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\n\nconst bull = (\n  <Box\n    component=\"span\"\n    sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\n  ></Box>\n);\n\nasync function loginUser(credentials: any) {\n  console.log('Credentials:', credentials);\n  return await fetch('http://localhost:8080/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  })\n    .then(data => data.json())\n    .catch(error => console.log('ERROR:', error));\n}\n\nexport default function LoginPage({ setToken }: any, customToken?: any) {\n  console.log('CUSTOM', customToken);\n  if (customToken.length > 0) {\n    setToken(customToken);\n  }\n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n\n  let token: any = null;\n  let shouldHideNoUserPopover: boolean = false;\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    token = await loginUser({\n      EmailAddress: username,\n      PasswordHash: password,\n    });\n\n    if (!token?.UserID) {\n      shouldHideNoUserPopover = true;\n    }\n    setToken(token);\n  };\n\n  const handleClick = (event: any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const open = Boolean(anchorEl) && shouldHideNoUserPopover;\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <Card sx={{ minWidth: 400 }} className=\"login-card\">\n      <CardContent className=\"card-content\">\n        <h1 className=\"card-parent-title\">Energy Management Dashboard</h1>\n        <p className=\"card-title\">Enter your email and password below</p>\n        <form onSubmit={handleSubmit}>\n          <label className=\"label-content\">\n            <p className=\"text-field-title\">Email</p>\n            <TextField\n              id=\"outlined-email-input\"\n              type=\"text\"\n              autoComplete=\"current-email\"\n              className=\"text-field\"\n              onChange={(e: any) => setUserName(e.target.value)}\n            />\n          </label>\n          <label className=\"label-content\">\n            <p className=\"text-field-title\">Password</p>\n            <TextField\n              id=\"outlined-password-input\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              className=\"text-field\"\n              onChange={(e: any) => setPassword(e.target.value)}\n            />\n          </label>\n          <div className=\"card-bottom\">\n            <Button\n              className=\"card-submit\"\n              type=\"submit\"\n              variant=\"contained\"\n              onClick={handleClick}\n              aria-describedby={id}\n            >\n              Log In\n            </Button>\n            <Popover\n              id={id}\n              open={open}\n              anchorEl={anchorEl}\n              onClose={handleClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n            >\n              <Typography sx={{ p: 2 }}>\n                User email or password does not exist\n              </Typography>\n            </Popover>\n          </div>\n        </form>\n      </CardContent>\n      <CardActions>\n        <p className=\"card-sign-up\">\n          Don't have an account? <span className=\"sign-up-text\">Sign Up!</span>\n        </p>\n      </CardActions>\n    </Card>\n  );\n}\n\nLoginPage.propTypes = {\n  setToken: PropTypes.func.isRequired,\n};\n","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/Dashboard/dashboardcard/dashboardCard.tsx",["69","70"],"import React from 'react';\nimport { ChartCard } from '../chartcard/chartCard';\nimport './dashboardCard.css';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\n\nimport {\n  IChartData,\n  ICarouselData,\n} from '../../../interfaces/chartData.interface';\nimport { IUserData } from '../../../interfaces/userData.interface';\n\nimport { convertEnergyDataToChartsData } from '../../../utils';\nimport { IEnergyData } from '../../../interfaces/energyData.interface';\n\ninterface MyProps {\n  userData: IUserData;\n}\n\ninterface MyState {\n  index: number;\n}\n\nlet selectedIndex: number = 0;\n\nexport default class DashboardCard extends React.Component<MyProps, MyState> {\n  constructor(props: any) {\n    console.log('DASH PROPS:', props);\n    super(props);\n    this.state = {\n      index: 0,\n    };\n\n    this.parentToChild = this.parentToChild.bind(this);\n\n    console.log(\n      'ENERGYDATA:',\n      this.getEnergyData(this.props.userData.EnergyData)\n    );\n  }\n\n  parentToChild(index: number) {\n    selectedIndex = index;\n    this.setState({\n      index: index,\n    });\n  }\n\n  getEnergyData(energyDatas: IEnergyData[]): IChartData[] {\n    return convertEnergyDataToChartsData(energyDatas);\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <div className=\"dashboard-header\">\n          <strong className=\"header-price\">\n            <span>Total Cost: </span>\n            {\n              this.getEnergyData(this.props.userData.EnergyData)[\n                this.state.index\n              ].price\n            }\n          </strong>\n          <div className=\"button-group\">\n            <ButtonGroup size=\"small\" aria-label=\"small button group\">\n              <Button onClick={() => this.parentToChild(3)}>1M</Button>\n              <Button onClick={() => this.parentToChild(2)}>3M</Button>\n              <Button onClick={() => this.parentToChild(1)}>6M</Button>\n              <Button onClick={() => this.parentToChild(0)}>1Y</Button>\n            </ButtonGroup>\n          </div>\n        </div>\n        <Card className=\"card-dashboard\">\n          <CardContent>\n            <div className=\"content\">\n              <div className=\"chart-card\">\n                <ChartCard\n                  energy={\n                    this.getEnergyData(this.props.userData.EnergyData)[\n                      this.state.index\n                    ]\n                  }\n                  shouldShowChart=\"true\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"card-list\">\n          <Card className=\"card\">\n            <CardContent>\n              <div className=\"cardContent\">\n                <strong style={{ fontSize: 'xxx-large' }}>59kwh</strong>\n                <div>Your Total Usage Last Month</div>\n                <div></div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card\">\n            <CardContent>\n              <div className=\"cardContent\">\n                <strong style={{ fontSize: 'xxx-large' }}>24kwh</strong>\n                <div>Average Total Usage Per Area</div>\n                <div></div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/utils.tsx",["71","72"],"import { IUserData } from './interfaces/userData.interface';\nimport { IChartData } from './interfaces/chartData.interface';\nimport { IEnergyData } from './interfaces/energyData.interface';\nimport { time } from 'console';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst billPayPeriod = {\n  year: 12,\n  halfYear: 6,\n  quarter: 3,\n  month: 1,\n};\n\nexport function convertEnergyDataToChartsData(\n  energyDatas: IEnergyData[]\n): IChartData[] {\n  let chartData: IChartData[] = [];\n\n  const yearChartData = setYearlyChartData(energyDatas);\n  const halfYearChartData = setHalfYearChartData(energyDatas);\n  const quarterYearChartData = setQuarterlyChartData(energyDatas);\n  const monthChartData = setMonthlyChartData(energyDatas);\n\n  chartData = [\n    yearChartData,\n    halfYearChartData,\n    quarterYearChartData,\n    monthChartData,\n  ];\n  return chartData;\n}\n\nexport function setYearlyChartData(energyDatas: IEnergyData[]): IChartData {\n  const yearlySavings = 0;\n\n  const yearlyChartData = {\n    price:\n      '$' + getTotalBillCost(energyDatas, billPayPeriod.year) + ' Past Year',\n    savings: yearlySavings.toString() + '%',\n    data: {\n      labels: [\n        convertTimeStampToMonthAndYear(\n          energyDatas[12].base.bill_statement_date\n        ),\n        convertTimeStampToMonthAndYear(\n          energyDatas[11].base.bill_statement_date\n        ),\n        convertTimeStampToMonthAndYear(\n          energyDatas[10].base.bill_statement_date\n        ),\n        convertTimeStampToMonthAndYear(energyDatas[9].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[8].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[7].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[6].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[5].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[4].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[3].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[2].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[1].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[0].base.bill_statement_date),\n      ],\n      datasets: [\n        {\n          label: '',\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: [\n            energyDatas[12].base.bill_total_cost,\n            energyDatas[11].base.bill_total_cost,\n            energyDatas[10].base.bill_total_cost,\n            energyDatas[9].base.bill_total_cost,\n            energyDatas[8].base.bill_total_cost,\n            energyDatas[7].base.bill_total_cost,\n            energyDatas[6].base.bill_total_cost,\n            energyDatas[5].base.bill_total_cost,\n            energyDatas[4].base.bill_total_cost,\n            energyDatas[3].base.bill_total_cost,\n            energyDatas[2].base.bill_total_cost,\n            energyDatas[1].base.bill_total_cost,\n            energyDatas[0].base.bill_total_cost,\n          ],\n        },\n      ],\n    },\n  };\n\n  return yearlyChartData;\n}\n\nexport function setHalfYearChartData(energyDatas: IEnergyData[]): IChartData {\n  const halfYearSavings = calculateHalfYearEnergySavings(energyDatas);\n\n  const halfYearChartData = {\n    price:\n      '$' +\n      getTotalBillCost(energyDatas, billPayPeriod.halfYear) +\n      ' Past 6 Months',\n    savings: halfYearSavings.toString() + '%',\n    data: {\n      labels: [\n        convertTimeStampToMonthAndYear(energyDatas[6].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[5].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[4].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[3].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[2].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[1].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[0].base.bill_statement_date),\n      ],\n      datasets: [\n        {\n          label: '',\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: [\n            energyDatas[6].base.bill_total_cost,\n            energyDatas[5].base.bill_total_cost,\n            energyDatas[4].base.bill_total_cost,\n            energyDatas[3].base.bill_total_cost,\n            energyDatas[2].base.bill_total_cost,\n            energyDatas[1].base.bill_total_cost,\n            energyDatas[0].base.bill_total_cost,\n          ],\n        },\n      ],\n    },\n  };\n\n  return halfYearChartData;\n}\n\nexport function setQuarterlyChartData(energyDatas: IEnergyData[]): IChartData {\n  const quarterlySavings = calculateQuarterlyEnergySavings(energyDatas);\n\n  const quarterlyChartData = {\n    price:\n      '$' +\n      getTotalBillCost(energyDatas, billPayPeriod.quarter) +\n      ' Past 3 Months',\n    savings: quarterlySavings.toString() + '%',\n    data: {\n      labels: [\n        convertTimeStampToMonthAndYear(energyDatas[3].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[2].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[1].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[0].base.bill_statement_date),\n      ],\n      datasets: [\n        {\n          label: '',\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: [\n            energyDatas[3].base.bill_total_cost,\n            energyDatas[2].base.bill_total_cost,\n            energyDatas[1].base.bill_total_cost,\n            energyDatas[0].base.bill_total_cost,\n          ],\n        },\n      ],\n    },\n  };\n\n  return quarterlyChartData;\n}\n\nexport function setMonthlyChartData(energyDatas: IEnergyData[]): IChartData {\n  const monthlySavings = calculateMonthlyEnergySavings(energyDatas);\n\n  const monthlyChartData = {\n    price:\n      '$' + getTotalBillCost(energyDatas, billPayPeriod.month) + ' Past Month',\n    savings: monthlySavings.toString() + '%',\n    data: {\n      labels: [\n        convertTimeStampToMonthAndYear(energyDatas[1].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[0].base.bill_statement_date),\n      ],\n      datasets: [\n        {\n          label: '',\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: [\n            energyDatas[1].base.bill_total_cost,\n            energyDatas[0].base.bill_total_cost,\n          ],\n        },\n      ],\n    },\n  };\n\n  return monthlyChartData;\n}\n\nexport function calculateMonthlyEnergySavings(\n  energyDatas: IEnergyData[]\n): number {\n  return (\n    ((energyDatas[0].base.bill_total_cost -\n      energyDatas[1].base.bill_total_cost) /\n      energyDatas[0].base.bill_total_cost) *\n    100\n  );\n}\n\nexport function calculateQuarterlyEnergySavings(\n  energyDatas: IEnergyData[]\n): number {\n  const totalCurrentQuarterlyCost =\n    energyDatas[0].base.bill_total_cost +\n    energyDatas[1].base.bill_total_cost +\n    energyDatas[2].base.bill_total_cost +\n    energyDatas[3].base.bill_total_cost;\n\n  const totalPreviousQuarterlyCost =\n    energyDatas[3].base.bill_total_cost +\n    energyDatas[4].base.bill_total_cost +\n    energyDatas[5].base.bill_total_cost +\n    energyDatas[6].base.bill_total_cost;\n\n  return (\n    ((totalCurrentQuarterlyCost - totalPreviousQuarterlyCost) /\n      totalCurrentQuarterlyCost) *\n    100\n  );\n}\n\nexport function calculateHalfYearEnergySavings(\n  energyDatas: IEnergyData[]\n): number {\n  const totalCurrentHalfYearCost =\n    energyDatas[0].base.bill_total_cost +\n    energyDatas[1].base.bill_total_cost +\n    energyDatas[2].base.bill_total_cost +\n    energyDatas[3].base.bill_total_cost +\n    energyDatas[4].base.bill_total_cost +\n    energyDatas[5].base.bill_total_cost;\n\n  const totalPreviousHalfYearCost =\n    energyDatas[6].base.bill_total_cost +\n    energyDatas[7].base.bill_total_cost +\n    energyDatas[8].base.bill_total_cost +\n    energyDatas[9].base.bill_total_cost +\n    energyDatas[10].base.bill_total_cost +\n    energyDatas[11].base.bill_total_cost;\n\n  return (\n    ((totalCurrentHalfYearCost - totalPreviousHalfYearCost) /\n      totalCurrentHalfYearCost) *\n    100\n  );\n}\n\nexport function convertTimeStampToMonth(timeStamp: string): string {\n  const date = new Date(timeStamp);\n  return monthNames[date.getMonth()];\n}\n\nexport function convertTimeStampToYear(timeStamp: string): number {\n  const date = new Date(timeStamp);\n  return date.getFullYear();\n}\n\nexport function convertTimeStampToMonthAndYear(timeStamp: string): string {\n  const date = new Date(timeStamp);\n  return monthNames[date.getMonth()] + ' ' + date.getFullYear();\n}\n\nexport function getTotalBillCost(\n  energyDatas: IEnergyData[],\n  billPeriod: number\n): string {\n  let totalBillCost: number = 0;\n  energyDatas.forEach((energyData, index) => {\n    if (index < billPeriod) {\n      totalBillCost += energyData.base.bill_total_cost;\n    }\n  });\n\n  return parseFloat(totalBillCost.toFixed(2)).toString();\n}\n","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/header/dropdown/dropdown.tsx",["73","74","75"],"import React, { useRef } from 'react';\nimport './dropdown.css';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport { useDetectOutsideClick } from '../../../useDetectOutsideClick';\n\nexport default function DropDownMenu({ setToken }: any) {\n  const dropdownRef = useRef(null);\n  const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false);\n  const onClick = () => setIsActive(!isActive);\n\n  return (\n    <div className=\"container\">\n      <div className=\"menu-container\">\n        <button onClick={onClick} className=\"menu-trigger\">\n          <AccountCircleIcon style={{ color: '#C5C7CD' }} />\n        </button>\n        <nav\n          ref={dropdownRef}\n          className={`menu ${isActive ? 'active' : 'inactive'}`}\n        >\n          <ul>\n            <li>\n              <a href=\"#\">Messages</a>\n            </li>\n            <li>\n              <a href=\"#\">Settings</a>\n            </li>\n            <li>\n              <a\n                href=\"#\"\n                onClick={() => {\n                  setToken(null);\n                }}\n              >\n                Logout\n              </a>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n}\n","/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/Dashboard/chartcard/chartCard.tsx",[],"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/components/sharedComponents/carousel/carousel.tsx",[],["76","77"],"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/useDetectOutsideClick.tsx",[],"/Users/draganlukic/Desktop/EnergyManagementApp/energyManagementUIGitHub/energyManagementUI/energyUI/src/serviceWorker.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":6,"column":17,"nodeType":"84","messageId":"85","endLine":6,"endColumn":26},{"ruleId":"82","severity":1,"message":"86","line":6,"column":28,"nodeType":"84","messageId":"85","endLine":6,"endColumn":36},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"87","line":13,"column":7,"nodeType":"84","messageId":"85","endLine":13,"endColumn":11},{"ruleId":"82","severity":1,"message":"88","line":11,"column":3,"nodeType":"84","messageId":"85","endLine":11,"endColumn":16},{"ruleId":"82","severity":1,"message":"89","line":45,"column":5,"nodeType":"84","messageId":"85","endLine":45,"endColumn":18},{"ruleId":"82","severity":1,"message":"90","line":1,"column":10,"nodeType":"84","messageId":"85","endLine":1,"endColumn":19},{"ruleId":"82","severity":1,"message":"91","line":4,"column":10,"nodeType":"84","messageId":"85","endLine":4,"endColumn":14},{"ruleId":"92","severity":1,"message":"93","line":23,"column":15,"nodeType":"94","endLine":23,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":26,"column":15,"nodeType":"94","endLine":26,"endColumn":27},{"ruleId":"92","severity":1,"message":"93","line":29,"column":15,"nodeType":"94","endLine":34,"endColumn":16},{"ruleId":"78","replacedBy":"95"},{"ruleId":"80","replacedBy":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'bull' is assigned a value but never used.","'ICarouselData' is defined but never used.","'selectedIndex' is assigned a value but never used.","'IUserData' is defined but never used.","'time' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["97"],["98"],"no-global-assign","no-unsafe-negation"]