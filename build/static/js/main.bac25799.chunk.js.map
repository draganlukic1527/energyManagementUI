{"version":3,"sources":["components/Login/login.tsx","components/header/dropdown/dropdown.tsx","useDetectOutsideClick.tsx","components/header/header.tsx","components/Dashboard/chartcard/chartCard.tsx","utils.tsx","components/Dashboard/dashboardcard/dashboardCard.tsx","App.tsx","useToken.tsx","reportWebVitals.js","serviceWorker.js","index.js"],"names":["Box","loginUser","credentials","a","console","log","fetch","method","headers","body","JSON","stringify","then","data","json","catch","error","LoginPage","customToken","setToken","length","useState","username","setUserName","password","setPassword","token","shouldHideNoUserPopover","React","anchorEl","setAnchorEl","handleSubmit","e","preventDefault","EmailAddress","PasswordHash","UserID","open","Boolean","id","undefined","Card","sx","minWidth","className","CardContent","onSubmit","TextField","type","autoComplete","onChange","target","value","Button","variant","onClick","event","currentTarget","aria-describedby","Popover","onClose","anchorOrigin","vertical","horizontal","Typography","p","CardActions","DropDownMenu","dropdownRef","useRef","el","initialState","isActive","setIsActive","useEffect","pageClickEvent","current","contains","window","addEventListener","removeEventListener","useDetectOutsideClick","style","color","ref","href","Header","prop","userData","Toolbar","FirstName","ChartCard","props","monthNames","billPayPeriod","convertEnergyDataToChartsData","energyDatas","yearlySavings","price","getTotalBillCost","savings","toString","labels","convertTimeStampToMonthAndYear","base","bill_statement_date","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","bill_total_cost","setYearlyChartData","halfYearSavings","totalCurrentHalfYearCost","totalPreviousHalfYearCost","calculateHalfYearEnergySavings","setHalfYearChartData","quarterlySavings","totalCurrentQuarterlyCost","totalPreviousQuarterlyCost","calculateQuarterlyEnergySavings","setQuarterlyChartData","monthlySavings","calculateMonthlyEnergySavings","setMonthlyChartData","timeStamp","date","Date","getMonth","getFullYear","billPeriod","totalBillCost","forEach","energyData","index","parseFloat","toFixed","DashboardCard","state","parentToChild","bind","getEnergyData","EnergyData","this","setState","size","aria-label","energy","shouldShowChart","fontSize","Component","App","tokenString","localStorage","getItem","userToken","parse","getToken","setItem","clear","useToken","loginProp","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.bac25799.chunk.js","sourcesContent":["import './login.css';\nimport React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport TextField from '@mui/material/TextField';\nimport PropTypes from 'prop-types';\nimport Popover from '@mui/material/Popover';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\n\nconst bull = (\n  <Box\n    component=\"span\"\n    sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\n  ></Box>\n);\n\nasync function loginUser(credentials: any) {\n  console.log('Credentials:', credentials);\n  return await fetch('http://localhost:8080/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  })\n    .then(data => data.json())\n    .catch(error => console.log('ERROR:', error));\n}\n\nexport default function LoginPage({ setToken }: any, customToken?: any) {\n  console.log('CUSTOM', customToken);\n  if (customToken.length > 0) {\n    setToken(customToken);\n  }\n  const [username, setUserName] = useState();\n  const [password, setPassword] = useState();\n\n  let token: any = null;\n  let shouldHideNoUserPopover: boolean = false;\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleSubmit = async (e: any) => {\n    e.preventDefault();\n    token = await loginUser({\n      EmailAddress: username,\n      PasswordHash: password,\n    });\n\n    if (!token?.UserID) {\n      shouldHideNoUserPopover = true;\n    }\n    setToken(token);\n  };\n\n  const handleClick = (event: any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const open = Boolean(anchorEl) && shouldHideNoUserPopover;\n  const id = open ? 'simple-popover' : undefined;\n\n  return (\n    <Card sx={{ minWidth: 400 }} className=\"login-card\">\n      <CardContent className=\"card-content\">\n        <h1 className=\"card-parent-title\">Energy Management Dashboard</h1>\n        <p className=\"card-title\">Enter your email and password below</p>\n        <form onSubmit={handleSubmit}>\n          <label className=\"label-content\">\n            <p className=\"text-field-title\">Email</p>\n            <TextField\n              id=\"outlined-email-input\"\n              type=\"text\"\n              autoComplete=\"current-email\"\n              className=\"text-field\"\n              onChange={(e: any) => setUserName(e.target.value)}\n            />\n          </label>\n          <label className=\"label-content\">\n            <p className=\"text-field-title\">Password</p>\n            <TextField\n              id=\"outlined-password-input\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              className=\"text-field\"\n              onChange={(e: any) => setPassword(e.target.value)}\n            />\n          </label>\n          <div className=\"card-bottom\">\n            <Button\n              className=\"card-submit\"\n              type=\"submit\"\n              variant=\"contained\"\n              onClick={handleClick}\n              aria-describedby={id}\n            >\n              Log In\n            </Button>\n            <Popover\n              id={id}\n              open={open}\n              anchorEl={anchorEl}\n              onClose={handleClose}\n              anchorOrigin={{\n                vertical: 'bottom',\n                horizontal: 'left',\n              }}\n            >\n              <Typography sx={{ p: 2 }}>\n                User email or password does not exist\n              </Typography>\n            </Popover>\n          </div>\n        </form>\n      </CardContent>\n      <CardActions>\n        <p className=\"card-sign-up\">\n          Don't have an account? <span className=\"sign-up-text\">Sign Up!</span>\n        </p>\n      </CardActions>\n    </Card>\n  );\n}\n\nLoginPage.propTypes = {\n  setToken: PropTypes.func.isRequired,\n};\n","import React, { useRef } from 'react';\nimport './dropdown.css';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nimport { useDetectOutsideClick } from '../../../useDetectOutsideClick';\n\nexport default function DropDownMenu({ setToken }: any) {\n  const dropdownRef = useRef(null);\n  const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false);\n  const onClick = () => setIsActive(!isActive);\n\n  return (\n    <div className=\"container\">\n      <div className=\"menu-container\">\n        <button onClick={onClick} className=\"menu-trigger\">\n          <AccountCircleIcon style={{ color: '#C5C7CD' }} />\n        </button>\n        <nav\n          ref={dropdownRef}\n          className={`menu ${isActive ? 'active' : 'inactive'}`}\n        >\n          <ul>\n            <li>\n              <a href=\"#\">Messages</a>\n            </li>\n            <li>\n              <a href=\"#\">Settings</a>\n            </li>\n            <li>\n              <a\n                href=\"#\"\n                onClick={() => {\n                  setToken(null);\n                }}\n              >\n                Logout\n              </a>\n            </li>\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nexport const useDetectOutsideClick = (el: any, initialState: any) => {\n  const [isActive, setIsActive] = useState(initialState);\n\n  useEffect(() => {\n    const pageClickEvent = (e: any) => {\n      // If the active element exists and is clicked outside of\n      if (el.current !== null && !el.current.contains(e.target)) {\n        setIsActive(!isActive);\n      }\n    };\n\n    // If the item is active (ie open) then listen for clicks\n    if (isActive) {\n      window.addEventListener('click', pageClickEvent);\n    }\n\n    return () => {\n      window.removeEventListener('click', pageClickEvent);\n    }\n\n  }, [isActive, el]);\n\n  return [isActive, setIsActive];\n}","import React from 'react';\nimport './header.css';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport DropDownMenu from './dropdown/dropdown';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\n\nexport default function Header(prop: any) {\n  console.log('HEADER:', prop, 'CHECK:', prop.userData);\n  return (\n    <Toolbar className=\"toolbar\">\n      <h2 className=\"title-text\">Energy Use Overview</h2>\n      <div className=\"toolbar-content\">\n        <NotificationsIcon style={{ color: '#C5C7CD' }} />\n        <div className=\"break-line\"></div>\n        <span className=\"welcome-text\">Hello, {prop.userData?.FirstName}</span>\n        <DropDownMenu setToken={prop.setToken}></DropDownMenu>\n      </div>\n    </Toolbar>\n  );\n}\n","import React from 'react';\nimport './chartCard.css';\nimport { Line } from 'react-chartjs-2';\n\nconst options: any = {\n  scales: {\n    x: {\n      grid: {\n        display: false,\n      },\n    },\n    y: {\n      grid: {\n        display: false,\n      },\n    },\n  },\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n  tooltips: {\n    enabled: false,\n  },\n  hover: { mode: null },\n};\n\n// CHECK:\nexport const ChartCard = (props: any) => (\n  <div className=\"card-container\">\n    {/* <Line type=\"line\" data={props.energy?.data} options={options} height={80} /> */}\n  </div>\n);\n","import { IUserData } from './interfaces/userData.interface';\nimport { IChartData } from './interfaces/chartData.interface';\nimport { IEnergyData } from './interfaces/energyData.interface';\nimport { time } from 'console';\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nconst billPayPeriod = {\n  year: 12,\n  halfYear: 6,\n  quarter: 3,\n  month: 1,\n};\n\nexport function convertEnergyDataToChartsData(\n  energyDatas: IEnergyData[]\n): IChartData[] {\n  let chartData: IChartData[] = [];\n\n  const yearChartData = setYearlyChartData(energyDatas);\n  const halfYearChartData = setHalfYearChartData(energyDatas);\n  const quarterYearChartData = setQuarterlyChartData(energyDatas);\n  const monthChartData = setMonthlyChartData(energyDatas);\n\n  chartData = [\n    yearChartData,\n    halfYearChartData,\n    quarterYearChartData,\n    monthChartData,\n  ];\n  return chartData;\n}\n\nexport function setYearlyChartData(energyDatas: IEnergyData[]): IChartData {\n  const yearlySavings = 0;\n\n  const yearlyChartData = {\n    price:\n      '$' + getTotalBillCost(energyDatas, billPayPeriod.year) + ' Past Year',\n    savings: yearlySavings.toString() + '%',\n    data: {\n      labels: [\n        convertTimeStampToMonthAndYear(\n          energyDatas[12].base.bill_statement_date\n        ),\n        convertTimeStampToMonthAndYear(\n          energyDatas[11].base.bill_statement_date\n        ),\n        convertTimeStampToMonthAndYear(\n          energyDatas[10].base.bill_statement_date\n        ),\n        convertTimeStampToMonthAndYear(energyDatas[9].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[8].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[7].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[6].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[5].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[4].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[3].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[2].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[1].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[0].base.bill_statement_date),\n      ],\n      datasets: [\n        {\n          label: '',\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: [\n            energyDatas[12].base.bill_total_cost,\n            energyDatas[11].base.bill_total_cost,\n            energyDatas[10].base.bill_total_cost,\n            energyDatas[9].base.bill_total_cost,\n            energyDatas[8].base.bill_total_cost,\n            energyDatas[7].base.bill_total_cost,\n            energyDatas[6].base.bill_total_cost,\n            energyDatas[5].base.bill_total_cost,\n            energyDatas[4].base.bill_total_cost,\n            energyDatas[3].base.bill_total_cost,\n            energyDatas[2].base.bill_total_cost,\n            energyDatas[1].base.bill_total_cost,\n            energyDatas[0].base.bill_total_cost,\n          ],\n        },\n      ],\n    },\n  };\n\n  return yearlyChartData;\n}\n\nexport function setHalfYearChartData(energyDatas: IEnergyData[]): IChartData {\n  const halfYearSavings = calculateHalfYearEnergySavings(energyDatas);\n\n  const halfYearChartData = {\n    price:\n      '$' +\n      getTotalBillCost(energyDatas, billPayPeriod.halfYear) +\n      ' Past 6 Months',\n    savings: halfYearSavings.toString() + '%',\n    data: {\n      labels: [\n        convertTimeStampToMonthAndYear(energyDatas[6].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[5].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[4].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[3].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[2].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[1].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[0].base.bill_statement_date),\n      ],\n      datasets: [\n        {\n          label: '',\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: [\n            energyDatas[6].base.bill_total_cost,\n            energyDatas[5].base.bill_total_cost,\n            energyDatas[4].base.bill_total_cost,\n            energyDatas[3].base.bill_total_cost,\n            energyDatas[2].base.bill_total_cost,\n            energyDatas[1].base.bill_total_cost,\n            energyDatas[0].base.bill_total_cost,\n          ],\n        },\n      ],\n    },\n  };\n\n  return halfYearChartData;\n}\n\nexport function setQuarterlyChartData(energyDatas: IEnergyData[]): IChartData {\n  const quarterlySavings = calculateQuarterlyEnergySavings(energyDatas);\n\n  const quarterlyChartData = {\n    price:\n      '$' +\n      getTotalBillCost(energyDatas, billPayPeriod.quarter) +\n      ' Past 3 Months',\n    savings: quarterlySavings.toString() + '%',\n    data: {\n      labels: [\n        convertTimeStampToMonthAndYear(energyDatas[3].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[2].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[1].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[0].base.bill_statement_date),\n      ],\n      datasets: [\n        {\n          label: '',\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: [\n            energyDatas[3].base.bill_total_cost,\n            energyDatas[2].base.bill_total_cost,\n            energyDatas[1].base.bill_total_cost,\n            energyDatas[0].base.bill_total_cost,\n          ],\n        },\n      ],\n    },\n  };\n\n  return quarterlyChartData;\n}\n\nexport function setMonthlyChartData(energyDatas: IEnergyData[]): IChartData {\n  const monthlySavings = calculateMonthlyEnergySavings(energyDatas);\n\n  const monthlyChartData = {\n    price:\n      '$' + getTotalBillCost(energyDatas, billPayPeriod.month) + ' Past Month',\n    savings: monthlySavings.toString() + '%',\n    data: {\n      labels: [\n        convertTimeStampToMonthAndYear(energyDatas[1].base.bill_statement_date),\n        convertTimeStampToMonthAndYear(energyDatas[0].base.bill_statement_date),\n      ],\n      datasets: [\n        {\n          label: '',\n          fill: false,\n          lineTension: 0.5,\n          backgroundColor: 'rgba(75,192,192,1)',\n          borderColor: 'rgba(0,0,0,1)',\n          borderWidth: 2,\n          data: [\n            energyDatas[1].base.bill_total_cost,\n            energyDatas[0].base.bill_total_cost,\n          ],\n        },\n      ],\n    },\n  };\n\n  return monthlyChartData;\n}\n\nexport function calculateMonthlyEnergySavings(\n  energyDatas: IEnergyData[]\n): number {\n  return (\n    ((energyDatas[0].base.bill_total_cost -\n      energyDatas[1].base.bill_total_cost) /\n      energyDatas[0].base.bill_total_cost) *\n    100\n  );\n}\n\nexport function calculateQuarterlyEnergySavings(\n  energyDatas: IEnergyData[]\n): number {\n  const totalCurrentQuarterlyCost =\n    energyDatas[0].base.bill_total_cost +\n    energyDatas[1].base.bill_total_cost +\n    energyDatas[2].base.bill_total_cost +\n    energyDatas[3].base.bill_total_cost;\n\n  const totalPreviousQuarterlyCost =\n    energyDatas[3].base.bill_total_cost +\n    energyDatas[4].base.bill_total_cost +\n    energyDatas[5].base.bill_total_cost +\n    energyDatas[6].base.bill_total_cost;\n\n  return (\n    ((totalCurrentQuarterlyCost - totalPreviousQuarterlyCost) /\n      totalCurrentQuarterlyCost) *\n    100\n  );\n}\n\nexport function calculateHalfYearEnergySavings(\n  energyDatas: IEnergyData[]\n): number {\n  const totalCurrentHalfYearCost =\n    energyDatas[0].base.bill_total_cost +\n    energyDatas[1].base.bill_total_cost +\n    energyDatas[2].base.bill_total_cost +\n    energyDatas[3].base.bill_total_cost +\n    energyDatas[4].base.bill_total_cost +\n    energyDatas[5].base.bill_total_cost;\n\n  const totalPreviousHalfYearCost =\n    energyDatas[6].base.bill_total_cost +\n    energyDatas[7].base.bill_total_cost +\n    energyDatas[8].base.bill_total_cost +\n    energyDatas[9].base.bill_total_cost +\n    energyDatas[10].base.bill_total_cost +\n    energyDatas[11].base.bill_total_cost;\n\n  return (\n    ((totalCurrentHalfYearCost - totalPreviousHalfYearCost) /\n      totalCurrentHalfYearCost) *\n    100\n  );\n}\n\nexport function convertTimeStampToMonth(timeStamp: string): string {\n  const date = new Date(timeStamp);\n  return monthNames[date.getMonth()];\n}\n\nexport function convertTimeStampToYear(timeStamp: string): number {\n  const date = new Date(timeStamp);\n  return date.getFullYear();\n}\n\nexport function convertTimeStampToMonthAndYear(timeStamp: string): string {\n  const date = new Date(timeStamp);\n  return monthNames[date.getMonth()] + ' ' + date.getFullYear();\n}\n\nexport function getTotalBillCost(\n  energyDatas: IEnergyData[],\n  billPeriod: number\n): string {\n  let totalBillCost: number = 0;\n  energyDatas.forEach((energyData, index) => {\n    if (index < billPeriod) {\n      totalBillCost += energyData.base.bill_total_cost;\n    }\n  });\n\n  return parseFloat(totalBillCost.toFixed(2)).toString();\n}\n","import React from 'react';\nimport { ChartCard } from '../chartcard/chartCard';\nimport './dashboardCard.css';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\n\nimport {\n  IChartData,\n  ICarouselData,\n} from '../../../interfaces/chartData.interface';\nimport { IUserData } from '../../../interfaces/userData.interface';\n\nimport { convertEnergyDataToChartsData } from '../../../utils';\nimport { IEnergyData } from '../../../interfaces/energyData.interface';\n\ninterface MyProps {\n  userData: IUserData;\n}\n\ninterface MyState {\n  index: number;\n}\n\nlet selectedIndex: number = 0;\n\nexport default class DashboardCard extends React.Component<MyProps, MyState> {\n  constructor(props: any) {\n    console.log('DASH PROPS:', props);\n    super(props);\n    this.state = {\n      index: 0,\n    };\n\n    this.parentToChild = this.parentToChild.bind(this);\n\n    console.log(\n      'ENERGYDATA:',\n      this.getEnergyData(this.props.userData.EnergyData)\n    );\n  }\n\n  parentToChild(index: number) {\n    selectedIndex = index;\n    this.setState({\n      index: index,\n    });\n  }\n\n  getEnergyData(energyDatas: IEnergyData[]): IChartData[] {\n    return convertEnergyDataToChartsData(energyDatas);\n  }\n\n  render() {\n    return (\n      <div className=\"Dashboard\">\n        <div className=\"dashboard-header\">\n          <strong className=\"header-price\">\n            <span>Total Cost: </span>\n            {\n              this.getEnergyData(this.props.userData.EnergyData)[\n                this.state.index\n              ].price\n            }\n          </strong>\n          <div className=\"button-group\">\n            <ButtonGroup size=\"small\" aria-label=\"small button group\">\n              <Button onClick={() => this.parentToChild(3)}>1M</Button>\n              <Button onClick={() => this.parentToChild(2)}>3M</Button>\n              <Button onClick={() => this.parentToChild(1)}>6M</Button>\n              <Button onClick={() => this.parentToChild(0)}>1Y</Button>\n            </ButtonGroup>\n          </div>\n        </div>\n        <Card className=\"card-dashboard\">\n          <CardContent>\n            <div className=\"content\">\n              <div className=\"chart-card\">\n                <ChartCard\n                  energy={\n                    this.getEnergyData(this.props.userData.EnergyData)[\n                      this.state.index\n                    ]\n                  }\n                  shouldShowChart=\"true\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"card-list\">\n          <Card className=\"card\">\n            <CardContent>\n              <div className=\"cardContent\">\n                <strong style={{ fontSize: 'xxx-large' }}>59kwh</strong>\n                <div>Your Total Usage Last Month</div>\n                <div></div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card\">\n            <CardContent>\n              <div className=\"cardContent\">\n                <strong style={{ fontSize: 'xxx-large' }}>24kwh</strong>\n                <div>Average Total Usage Per Area</div>\n                <div></div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n}\n","import './App.css';\nimport LoginPage from './components/Login/login';\nimport Header from './components/header/header';\nimport DashboardCard from './components/Dashboard/dashboardcard/dashboardCard';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport React, { Component, useState } from 'react';\nimport '@fontsource/mulish';\nimport useToken from './useToken';\n\nexport interface ILoginProp {\n  userData: any;\n}\n\nfunction App() {\n  const { token, setToken } = useToken();\n\n  let loginProp: ILoginProp = {\n    userData: {},\n  };\n\n  console.log('token app:', token);\n  if (!token?.UserID) {\n    return <LoginPage setToken={setToken} />;\n  }\n  if (token) {\n    loginProp = {\n      userData: token,\n    };\n\n    console.log('Token Login:', token);\n    return (\n      <div className=\"App\">\n        <Header setToken={setToken} userData={loginProp.userData}></Header>\n        <DashboardCard userData={loginProp.userData}></DashboardCard>\n      </div>\n    );\n  }\n\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route\n          path=\"/login\"\n          element={\n            <div className=\"App\">\n              <LoginPage setToken={setToken} />\n            </div>\n          }\n        />\n        <Route\n          path=\"/\"\n          element={\n            <div className=\"App\">\n              <Header\n                setToken={setToken}\n                userData={loginProp.userData}\n              ></Header>\n              <DashboardCard userData={loginProp.userData} />\n            </div>\n          }\n        />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { useState } from 'react';\n\nexport default function useToken() {\n  const getToken = () => {\n    const tokenString: any = localStorage.getItem('UserID');\n    const userToken = JSON.parse(tokenString);\n    return userToken?.UserID;\n  };\n\n  const [token, setToken] = useState(getToken());\n\n  const saveToken = (userToken: any) => {\n    if (userToken) {\n      localStorage.setItem('token', JSON.stringify(userToken));\n      setToken(userToken);\n    } else {\n      localStorage.clear();\n      setToken(null);\n    }\n  };\n  return {\n    setToken: saveToken,\n    token,\n  };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.unregister();\n"],"sourceRoot":""}